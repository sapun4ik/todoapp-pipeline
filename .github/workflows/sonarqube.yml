name: Sonarqube

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  sonarqube-analysis:
    runs-on: ubuntu-latest
    services:
      sonarqube:
        image: sonarqube
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl --fail http://localhost:9000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Java JDK
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Wait for SonarQube to be ready
        run: |
          until $(curl --output /dev/null --silent --head --fail http://localhost:9000); do
              printf '.'
              sleep 5
          done

      - name: Create SonarQube Project and Generate Token
        run: |
          # Create a project
          echo curl -X POST -u admin:admin "http://localhost:9000/api/projects/create?name=todoapp&project=todoapp_key"
          curl -X POST -u admin:admin "http://localhost:9000/api/projects/create?name=todoapp&project=todoapp_key"
          
          # Generate a token
          echo $(curl -X POST -u admin:admin "http://localhost:9000/api/user_tokens/generate?name=todoapp_token" | jq -r .token)
          TOKEN=$(curl -X POST -u admin:admin "http://localhost:9000/api/user_tokens/generate?name=todoapp_token" | jq -r .token)
          
          # Set the token as an environment variable for later steps
          echo "SONAR_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Run SonarQube analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          ./gradlew sonar \
            -Dsonar.projectKey=todoapp_key \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

    # ... rest of your jobs like building and deploying
